import UIKit

var greeting = "Hello, playground Binary Testing"

extension Int {
    
    //From Decimal
    //10 -> 2
    func decToBinString() -> String {
        let result = createString(radix: 2)
        return result
    }
    
    //10 -> 8
    func decToOctString() -> String {
        //        let result = decToOctStringFormat()
        let result = createString(radix: 8)
        
        return result
    }
    
    //10 -> 16
    func decToHexString() -> String {
        //        let result = decToHexStringFormat()
        let result = createString(radix: 16)
        return result
    }
    
    //10 -> 8
    func decToOctStringFormat(minLength: Int = 0) -> String {
        
        return createString(minLength: minLength, system: "O")
    }
    
    //10 -> 16
    func decToHexStringFormat(minLength: Int = 0) -> String {
        
        return createString(minLength: minLength, system: "X")
    }
    
    fileprivate  func createString(radix: Int) -> String {
        return String(self, radix: radix, uppercase: true)
    }
    
    fileprivate func createString(minLength: Int = 0, system: String) -> String {
        //0 - fill empty space by 0
        //minLength - min count of chars
        //system - system number
        return String(format:"%0\(minLength)\(system)", self)
    }
}

extension String {
    //To Decimal
    //2 -> 10
    func binToDec() -> Int {
        return createInt(radix: 2)
    }
    
    //8 -> 10
    func octToDec() -> Int {
        return createInt(radix: 8)
    }
    
    //16 -> 10
    func hexToDec() -> Int {
        return createInt(radix: 16)
    }
    
    //Others
    //2 -> 8
    func binToOct() -> String {
        return self.binToDec().decToOctString()
    }
    
    //2 -> 16
    func binToHex() -> String {
        return self.binToDec().decToHexString()
    }
    
    //8 -> 16
    func octToHex() -> String {
        return self.octToDec().decToHexString()
    }
    
    //16 -> 8
    func hexToOct() -> String {
        return self.hexToDec().decToOctString()
    }
    
    //16 -> 2
    func hexToBin() -> String {
        return self.hexToDec().decToBinString()
    }
    
    //8 -> 2
    func octToBin() -> String {
        return self.octToDec().decToBinString()
    }
    
    //Additional
    //16 -> 2
    func hexToBinStringFormat(minLength: Int = 0) -> String {
        
        return hexToBin().pad(minLength: minLength)
    }
    
    fileprivate func pad(minLength: Int) -> String {
        let padCount = minLength - self.count
        
        guard padCount > 0 else {
            return self
        }
        
        return String(repeating: "0", count: padCount) + self
    }
    
    fileprivate func createInt(radix: Int) -> Int {
        return Int(self, radix: radix)!
    }
    
}
//--------------------------------------------------------------------------------------------------------------
// First Test
var stringFromScanning = "88f1b38cc4b6b3d4|193F113X001675"
var boradIdArray = stringFromScanning.split(separator: "|")
var hexId = boradIdArray.first
if let hexId = hexId {
    let strHexId = String(hexId)
    let decId = UInt64(strHexId, radix: 16)
    //  let number = Int32(Int(strHexId, radix: 16)!)
    //  print(number) // -834522818
    //  let result = UInt(strtoul(strHexId, nil, 16))
    let d4 = Int64(strHexId, radix: 16)
    let d5 = Int(strHexId, radix: 16)
    //  let testExtension = abs(strHexId.hexToDec())
}
let quote = "The revolution will be Swift"
let substring = quote.dropFirst(23)
let realString = String(substring)
//--------------------------------------------------------------------------------------------------------------
// Decimal to binary
let d1 = 21
let b1 = String(d1, radix: 2)
print(b1) // "10101"

// Binary to decimal
let b2 = "10110"
let d2 = Int(b2, radix: 2)!
print(d2) // 22

// Decimal to hexadecimal
let d3 = 61
let h1 = String(d3, radix: 16)
print(h1) // "3d"

// Hexadecimal to decimal
let h2 = "a3"
let d4 = Int(h2, radix: 16)!
print(d4) // 163

// Binary to hexadecimal
let b3 = "10101011"
let h3 = String(Int(b3, radix: 2)!, radix: 16)
print(h3) // "ab"

// Hexadecimal to binary
let h4 = "face"
let b4 = String(Int(h4, radix: 16)!, radix: 2)
print(b4) // "1111101011001110"

//--------------------------------------------------------------------------------------------------------------
// Exention For String
extension String {
    typealias Byte = UInt8
    var hexaToBytes: [Byte] {
        var start = startIndex
        return stride(from: 0, to: count, by: 2).compactMap { _ in   // use flatMap for older Swift versions
            let end = index(after: start)
            defer { start = index(after: end) }
            return Byte(self[start...end], radix: 16)
        }
    }
    var hexaToBinary: String {
        return hexaToBytes.map {
            let binary = String($0, radix: 2)
            return repeatElement("0", count: 8-binary.count) + binary
        }.joined()
    }
    
    var toggleBinary: String { // "0111011100001110010011000111001100111011010010010100110000101011" ==> "111011100001110010011000111001100111011010010010100110000101100"
        var charArray : [Character] = []
        let strBinaryToDecimal = String(self)
        for c in strBinaryToDecimal {
            if c == "1" {
                charArray.append("0")
            } else if c == "0" {
                charArray.append("1")
            }
        }
        var nReturnString = ""
        for c in charArray {
            nReturnString += String(c)
        }
        return nReturnString
    }
    
    func addBinary(b:String) -> String {
        func toInt(binaryString: String) -> Int {
            return strtol(binaryString, nil, 2)
        }
        let _a = toInt(binaryString: self)
        let _b = toInt(binaryString: b)
        return String(_a + _b, radix: 2)
    }
}
//--------------------------------------------------------------------------------------------------------------
// TO TEST
func toggleBinary(binaryToDecimal: String) -> String {
    var charArray : [Character] = []
    let strBinaryToDecimal = String(binaryToDecimal)
    for c in strBinaryToDecimal {
        //  charArray.append(c)
        if c == "1" {
            charArray.append("0")
        } else if c == "0" {
            charArray.append("1")
        }
    }
    var nReturnString = ""
    for c in charArray {
        nReturnString += String(c)
    }
    return nReturnString
}

func addBinary(a:String, b:String) -> String {
    func toInt(binaryString: String) -> Int {
        return strtol(binaryString, nil, 2)
    }
    let _a = toInt(binaryString: a)
    let _b = toInt(binaryString: b)
    return String(_a + _b, radix: 2)
}

// 1000100011110001101100111000110011000100101101101011001111010100
// Change to nagative calculation
// 1000100011110001101100111000110011000100101101101011001111010100
let hexToBinary = "88f1b38cc4b6b3d4".hexaToBinary
let result = addBinary(a:"11", b:"1")
print(result)
toggleBinary(binaryToDecimal: hexToBinary)
let binaryToDecimalAgain = UInt64(toggleBinary(binaryToDecimal: hexToBinary), radix: 2)
let testToggle = toggleBinary(binaryToDecimal: hexToBinary)
addBinary(a: testToggle, b: "1")
// Hexadecimal to binary
//hexToBinary.hexaToBinary
//let binaryFromHex = String(Int(hexToBinary, radix: 64), radix: 2)
print(hexToBinary) // "1111101011001110"
// Binary to decimal
//let b2 = "10110"
let binaryToDecimal = UInt64(hexToBinary, radix: 2)
print(binaryToDecimal) // 22

//--------------------------------------------------------------------------------------------------------------
// TO IMPLEMENT
// 5992341872583741416
// 5329132F300D8FE8
let barcode1 = "88f1b38cc4b6b3d4|193F113X001675"
let barcode2 = "5329132F300D8FE8|193F113X001675"

func getOnlineIdFromScanner(barcode: String) -> String? {
    let boardInfoFromScanner = barcode.split(separator: "|")
    guard let  hexId = boardInfoFromScanner.first else {return nil}
    let hexToBinary = String(hexId).hexaToBinary
    if hexToBinary.first == "1" { // Start With 1 == Nagitive Calulation
        let toggleBinary = toggleBinary(binaryToDecimal: hexToBinary)
        let addBinaryWithOne = addBinary(a: toggleBinary, b: "1")
        if let intId = UInt64(addBinaryWithOne, radix: 2) {
            return String(intId)
        }
    } else if hexToBinary.first == "0" { // Start With 0 == Just Calculate From Binary to Decimal
        if let intId = UInt64(hexToBinary, radix: 2) {
            return String(intId)
        }
    }
    return nil
}

getOnlineIdFromScanner(barcode: barcode1)
getOnlineIdFromScanner(barcode: barcode2)

//--------------------------------------------------------------------------------------------------------------
// TO FINAL IMPLEMENT
func getOnlineIdFrom(barcode: String) -> String? {
    let boardInfoFromScanner = barcode.split(separator: "|")
    guard let  hexId = boardInfoFromScanner.first else {return nil}
    let hexToBinary = String(hexId).hexaToBinary
    if hexToBinary.first == "1" { // Start With 1 == Nagitive Calulation
        let toggleBinaryAndAddOne =  hexToBinary.toggleBinary.addBinary(b: "1")
        if let intId = UInt64(toggleBinaryAndAddOne, radix: 2) {
            return String(intId)
        }
    } else if hexToBinary.first == "0" { // Start With 0 == Just Calculate From Binary to Decimal
        if let intId = UInt64(hexToBinary, radix: 2) {
            return String(intId)
        }
    }
    return nil
}

getOnlineIdFrom(barcode: barcode1)
getOnlineIdFrom(barcode: barcode2)

// https://www.youtube.com/watch?v=K1Xqw5jh_yk
// https://www.youtube.com/watch?v=n6taPbsRqV4
